#! /usr/bin/env python

import os, sys, glob

def build(bld):
    files = bld.path.ant_glob('*.c*')
    files.extend(bld.path.ant_glob('deps/cJSON/*.c'))
    files.extend(bld.path.ant_glob('deps/miniz/*.c'))
    files.extend(bld.path.ant_glob('deps/commander/*.c'))

    platform = bld.env.PLATFORM
    # Platform files
    if platform == 'win32':
        files.extend(bld.path.ant_glob('platform/win/*.c*'))
    elif platform.startswith('linux'):
        files.extend(bld.path.ant_glob('platform/posix/*.c'))
        files.extend(bld.path.ant_glob('platform/linux/*.c'))
    elif platform == 'darwin':
        files.extend(bld.path.ant_glob('platform/posix/*.c'))
        files.extend(bld.path.ant_glob('platform/osx/*.c'))

    # Libs
    libs = []
    linkflags = []
    frameworks = []
    if platform.startswith('linux'):
        libs.extend(['rt', 'm'])
    elif platform == 'darwin':
        libs.extend(['stdc++'])
    elif platform == 'win32':
        linkflags.extend(['/NODEFAULTLIB:"LIBCMTD.LIB"', '/NODEFAULTLIB:"LIBCMT.LIB"'])
        libs.extend(['ws2_32', 'Shell32', 'Advapi32', 'User32'])

    defines = ['_CORE_EXPORT_']

    # turn on file monitoring (+efsw lib)
    if bld.env.DFILEMON:
        libs.append('efsw')
        defines.append('_FILEMON_')

    # Version number
    vnum = ''
    if sys.platform.startswith('linux') or sys.platform == 'darwin':
        vnum = bld.env.VERSION
    
    # Copy under /bin for windows and /lib for others
    if sys.platform != 'win32':
        install_path = '${PREFIX}/lib'
    else:
        install_path = '${PREFIX}/bin'

    bld.shlib(
        source = files,
        includes = [\
            os.path.join(bld.env.ROOTDIR, 'build'),
            os.path.join(bld.env.ROOTDIR, 'include', 'dhcore'),
            'deps'
        ],
        lib = libs,
        linkflags = linkflags,
        framework = frameworks,
        target = 'dhcore' + bld.env.SUFFIX,
        name = 'dhcore',
        export_includes = os.path.join(bld.env.ROOTDIR, 'include'),
        install_path = install_path,
        defines = defines,
        vnum = vnum)

